A ∈ lists is ${{ A instanceof Array }}$;
A ∉ lists is ${{ !(A instanceof Array) }}$;

/* All variations of getting a lists length */
A # is ${{ A.length }}$ when A ∈ lists;
A length is ${{ A.length }}$ when A ∈ lists;
# A is ${{ A.length }}$ when A ∈ lists;
length A is ${{ A.length }}$ when A ∈ lists;

A join B is join A B										when A ∈ lists;
join A B 0 is A at (A# - 1)									when A ∈ lists;
join A B is join A B (A# - 1)								when A ∈ lists;
join A B I is (A at (A# - I - 1)) ∙ B ∙ (join A B (I - 1))	when (A ∈ lists) ∧ (I ∈ numbers);

A append B is ${{ (function() { var a = A.slice(); a.push(B); return a; })() }}$		when A ∈ lists;
append A B is A append B;
prepend A B is ${{ [B].concat(A) }}$;

concat A B is ${{ A.concat(B) }}$ when (A ∈ lists) ∧ (B ∈ lists);
A concat B is ${{ A.concat(B) }}$ when (A ∈ lists) ∧ (B ∈ lists);
A ∙ B is ${{ A.concat(B) }}$ when (A ∈ lists) ∧ (B ∈ lists);

/* Get item at index */
A at B is ${{ A[B] }}$ when (A ∈ lists) ∧ (B ∈ numbers);

/* Build sequences using a comma */
A , B is [A B] when A ∉ lists;
A , B is append A B when A ∈ lists;

/* Sort */
_midvalue A is A at (⎣(A# / 2)⎦);
sort A is A when A# = 1;
sort A is [] when A# = 0;
sort A is ((sort (filter [> (_midvalue A)] A)) ∙ (filter [= (_midvalue A)] A)) ∙ (sort (filter [< (_midvalue A)] A)) when A# > 1;

