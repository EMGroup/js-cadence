A ∈ lists is ${{ A instanceof Array }}$;
list A is [_list A];
_list A I is ${{ A[I] }}$			when (A ∈ lists) ∧ (I ∈ numbers);
_list A length is ${{ A.length }}$	when A ∈ lists;

list A join 0 is list A (list A length - 1)							when A ∈ lists;
list A join is list A join (list A length - 1)		when A ∈ lists;
list A join I is (list A (list A length - I - 1)) concat (list A join (I - 1))	when (A ∈ lists) ∧ (I ∈ numbers);


list A append B is ${{ (function() { var a = A.slice(); a.push(B); return a; })() }}$		when A ∈ lists;
//list A append B is ${{ [A,B] }}$				when A ∉ lists;

append A B is list A append B;
prepend A B is ${{ [B].concat(A) }}$;

A at B is ${{ A[B] }}$ when (A ∈ lists) ∧ (B ∈ numbers);

apply X to all A is apply X to all A (list A length - 1)		when A ∈ lists;
apply X to all A 0 is [(X (list A (list A length - 1)))]			when A ∈ lists;
apply X to all A I is list [(X (list A (list A length - I - 1)))] append (apply X to all A (I - 1))	when (A ∈ lists) ∧ (I ∈ numbers);

/* Functional language */

/* Unoptimised pure implementation of map
map X A is map X A 0								when (A ∈ lists) ∧ (list A length > 0);
map X A is []										when (A ∈ lists) ∧ (list A length = 0);
map X A I is [(X (list A I))]							when (A ∈ lists) ∧ (I = (list A length - 1));
map X A I is prepend (map X A (I + 1)) (X (list A I))		when (A ∈ lists) ∧ (I < (list A length - 1));
*/

/* JS Optimised Map */
map X A is ${{ Cadence.opt.map(X, A) }}$			when ${{ Array.isArray(A) }}$;

foldl X Y A is foldl X Y A 0						when (A ∈ lists) ∧ (list A length > 0);
foldl X Y A is Y									when (A ∈ lists) ∧ (list A length = 0);
foldl X Y A I is X Y (list A 0)						when (A ∈ lists) ∧ (I = (list A length - 1));
foldl X Y A I is X (foldl X Y A (I + 1)) (list A (list A length - I - 1))		when (A ∈ lists) ∧ (I < (list A length - 1));

foldr X Y A is foldr X Y A 0						when (A ∈ lists) ∧ (list A length > 0);
foldr X Y A is Y									when (A ∈ lists) ∧ (list A length = 0);
foldr X Y A I is X (list A I) Y						when (A ∈ lists) ∧ (I = (list A length - 1));
foldr X Y A I is X (list A I) (foldr X Y A (I + 1))	when (A ∈ lists) ∧ (I < (list A length - 1));

foldl1 X A is foldl1 X A 0							when (A ∈ lists) ∧ (list A length > 0);
foldl1 X A I is list A 0							when (A ∈ lists) ∧ (I = (list A length - 1));
foldl1 X A I is X (foldl1 X A (I + 1)) (list A (list A length - I - 1))		when (A ∈ lists) ∧ (I < (list A length - 1));

foldr1 X A is foldr1 X A 0							when (A ∈ lists) ∧ (list A length > 0);
foldr1 X A I is list A I							when (A ∈ lists) ∧ (I = (list A length - 1));
foldr1 X A I is X (list A I) (foldr1 X A (I + 1))	when (A ∈ lists) ∧ (I < (list A length - 1));

filter X A is filter X A (list A length - 1)		when (A ∈ lists);
filter X A 0 is [(list A (list A length - 1))]		when (A ∈ lists) ∧ (X (list A (list A length - 1)));
filter X A 0 is []									when (A ∈ lists) ∧ (not (X (list A (list A length - 1))));
filter X A I is list [(list A (list A length - I - 1))] append (filter X A (I - 1))	when (A ∈ lists) ∧ (I ∈ numbers) ∧ (X (list A (list A length - I - 1)));
filter X A I is filter X A (I - 1)	when (A ∈ lists) ∧ (I ∈ numbers) ∧ (not (X (list A (list A length - I - 1))));

